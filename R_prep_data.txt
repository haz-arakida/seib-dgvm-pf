###############################################################################
#R SETTINGS
###############################################################################
###SHELL
# module purge
# module load intel/2019.0.045 common/hdf5/1.8.14 common/netcdf/4.3.2 common_intel/R 
# R 

#install.packages("ncdf4") #if it is not installed. ncdf3 can be used with this library.
library(ncdf4)

###############################################################################
#SETTINGS
###############################################################################

#DIRECTORY
  setwd("/lfs01/arakida/DATA_for_DBF_JP/climate_ERA5")
  SCR<-"SCR_FIG_v4/temp_soiltemp_longwave"
  DAT<-"SCR_DL_CVT"

#TIME
  startyear <- 2007  #NCEP/NCAR DLdata 1/1 arakida changed 20160926
  endyear <- 2007  #NCEP/NCAR DLdata 1/1  arakida changed 20160926
  yearlength <- endyear - startyear + 1
  year <- c(startyear:endyear) # range of years the climate data covers

#ERA5
  mx <- 1440
  my <- 721
  xmin <- 0 #https://confluence.ecmwf.int/display/CKB/ERA5%3A+What+is+the+spatial+reference
  ymin <- 90
  xrsl <- 0.25
  yrsl <- 0.25
  undef <- -32767
  dat <- c("2m_temperature","soil_temperature_level_1","soil_temperature_level_2",
             "soil_temperature_level_3","soil_temperature_level_4","total_precipitation",
             "10m_u_component_of_wind","10m_v_component_of_wind", "surface_net_thermal_radiation", "surface_thermal_radiation_downwards",
             "surface_solar_radiation_downwards","total_sky_direct_solar_radiation_at_surface","surface_solar_radiation_downward_clear_sky", 
             "surface_pressure","2m_dewpoint_temperature")
  valname<-c("t2m","stl1","stl2","stl3","stl4","tp","u10", "v10","str","strd", "ssrd","fdir","ssrdc","sp","d2m")

#LEAP: if the data include leap year, you sould think about this!!
  leap<-numeric(yearlength)
  for (i in 1:yearlength){
    leap[i]<-0
    if ((year[i] - floor(year[i]/4) * 4)==0){
      leap[i]<-1
    }
  }
  leapyears<-sum(leap)
  totaldays<-yearlength*365+leapyears
  month.days      <- c(31,28,31,30,31,30,31,31,30,31,30,31)
  month.days.leap <- c(31,29,31,30,31,30,31,31,30,31,30,31)
  daynum <- cumsum(month.days)
  daynum.leap <- cumsum(month.days.leap)

#STUDY SITES 
  sitefile<-paste(SCR, "/studysites.csv", sep="")
  studysites<-read.csv(sitefile)
  sitenum<-length(studysites[,1])
  sclim<-array(data=NA, c(totaldays,9, sitenum)) #data length, N of parameters, N of study sites

#OUTDATA
  outdata_temp<-array(data=NA, c(yearlength*365*24, 15, sitenum)) # arakida changed 20160926

#LATTICE POINTS AND WEIGHTS
  eralon <- numeric(mx)
  eralat <- numeric(my)
  ipoint <- integer(sitenum) #left grid id for the four reffered grids
  jpoint <- integer(sitenum) #upper grid id for the four reffered grids
  lwgt <- integer(sitenum) #weight for left grid
  uwgt <- integer(sitenum) #weight for up grid
  smsk <- integer(sitenum) #outof bound

#ADJUST UTC>JTC
  time_diff <- 9 #00:00UTC=09:00JST
  start_1  <-  sum(month.days[1:12]) * 24 - time_diff  + 1      #31st December, 150000 UTC (000000 JST )
  end_1  <-  sum(month.days[1:12]) * 24              #31st December, 230000 UTC (080000 JST)
  start_2  <-  1                                                                  #1st January,  000000 UTC (090000 JST)
  end_2  <-  sum(month.days[1:12]) * 24 - time_diff    #31st December, 140000 JST (230000 UTC)


###############################################################################
#READ DATA
###############################################################################


###WEIGHT AND POINTER##########################################################

##Latlon
  for (i in 1:mx){
    eralon[i] <- xmin + (i-1)*xrsl
  }
  for (i in 1:my){
    eralat[i] <- ymin - (i-1)*yrsl
  }
  cat("minval(lat,lon)=", min(eralat), min(eralon)) 
  cat("maxval(lat,lon)=", max(eralat), max(eralon))

##Gen_bilinear
  for (ista in 1:sitenum){
    for (j in 2:my){
      if ( (eralat[j-1] >= studysites[ista,1]) && (studysites[ista,1] > eralat[j]) ){
        for (i in 2:mx){
          if ( (eralon[i-1] <= studysites[ista,2]) && (studysites[ista,2]) < eralon[i]){
            smsk[ista] <- 1.0
            ipoint[ista] <- i-1
            jpoint[ista] <- j-1
            lwgt[ista] <- ( studysites[ista,2] - eralon[i-1] ) / ( eralon[i] - eralon[i-1] )        
            uwgt[ista] <- ( eralat[j-1] - studysites[ista,1] ) / ( eralat[j-1] - eralat[j] )
          }
        }
      }
    }
  }

###READ DATA AND CONVERT WITH WEIGHTS (P, T -> ELEVATION CORRECTION)###########

#ERA5 ELEVATION
  topofile<-paste(DAT, "/","topography/era5_topo.nc",sep="")
  topo<-nc_open(topofile) #200701010000 data
  era5_topo<-ncvar_get(topo)
  era5_topo<-era5_topo/9.80665 #scale factor and add_offset are already applyed by R
  atemp_temp<-array(data=NA, c(sitenum, 4, totaldays*24)) #era5 atemp without correction
  atemp_temp_height_correct<-array(data=NA, c(sitenum, 4, totaldays*24)) #era5 atemp with correction
  ap_temp<-array(data=NA, c(sitenum, 4, totaldays*24)) #era5 ap without correction
  lw_net_temp<-array(data=NA, c(sitenum, 4, totaldays*24)) #era5 net longwace radiation

#FUNCTION FOR SPECIFIC HUMIDITY
 f<-function(X,Y){

   Xc = X/100 #P to hP
   Yc = Y - 273.15 #K to C 
   e = 6.112*exp((17.67*Yc) /(243.5+Yc)) #Bolton(1980), water vapor pressure
   sh = (0.622*e)/(Xc-0.378*e)

   f=sh
 }

#DATA PROCESSING
  for (idata in c(9,10)){
    counter<-1
    countdat<-1
    for (year in startyear:endyear) {  
      for (month in 1:12){
        filename<-paste(DAT, "/",dat[idata],"/",year, sprintf("%02d", month), ".nc", sep="")
        nc<-nc_open(filename)
        data<-ncvar_get(nc, valname[idata]) #data<-ncvar_get(nc) maybe also work
        datain<-array(data=NA,c(sitenum, month.days[month]*24))
      
        for (day in 1:month.days[month]) {
          for (hour in 1:24) {
            datanow <- data[,,((day-1)*24+hour)]
            datanow2 <- datanow 
                       
             for (ista in 1:sitenum){
              if(smsk[ista] > 0.5){
                i1 <- ipoint[ista]
                i2 <- ipoint[ista] + 1
                j1 <- jpoint[ista]
                j2 <- jpoint[ista] + 1
                wl <- lwgt[ista]
                wr <- 1.0 - lwgt[ista]
                wu <-uwgt[ista]
                wd <- 1.0 - uwgt[ista]

                if (idata <= 5) {
                ###ELEVATION CORRECTION FOR TEMP
                  if (day == 1 && hour == 1) {   
                    hc1 <- (studysites[ista,5]-era5_topo[i1,j1])*(0.65/100)
                    hc2 <- (studysites[ista,5]-era5_topo[i2,j1])*(0.65/100)
                    hc3 <- (studysites[ista,5]-era5_topo[i1,j2])*(0.65/100)
                    hc4 <- (studysites[ista,5]-era5_topo[i2,j2])*(0.65/100)      
                  }

                ###KEEP THE VALUE FOR LONGWAVE RADIATION     
                  if (idata == 1) {
                    atemp_temp[ista,1,countdat] <- datanow2[i1,j1]
                    atemp_temp[ista,2,countdat] <- datanow2[i2,j1]
                    atemp_temp[ista,3,countdat] <- datanow2[i1,j2]
                    atemp_temp[ista,4,countdat] <- datanow2[i2,j2]
                  }
                  
                  datanow[i1,j1] <- datanow2[i1,j1]-hc1
                  datanow[i2,j1] <- datanow2[i2,j1]-hc2
                  datanow[i1,j2] <- datanow2[i1,j2]-hc3
                  datanow[i2,j2] <- datanow2[i2,j2]-hc4

                ###KEEP THE VALUE FOR LONGWAVE RADIATION   
                  if (idata == 1) {
                   atemp_temp_height_correct[ista,1,countdat] <- datanow[i1,j1]
                   atemp_temp_height_correct[ista,2,countdat] <- datanow[i2,j1]
                   atemp_temp_height_correct[ista,3,countdat] <- datanow[i1,j2]
                   atemp_temp_height_correct[ista,4,countdat] <- datanow[i2,j2]
                  }     
                } 

                ###ELEVATION CORRECTION FOR LONGWAVE
                if (idata == 9) {
                  lw_net_temp[ista,1,countdat] <- datanow[i1,j1]
                  lw_net_temp[ista,2,countdat] <- datanow[i2,j1]
                  lw_net_temp[ista,3,countdat] <- datanow[i1,j2]
                  lw_net_temp[ista,4,countdat] <- datanow[i2,j2]
                }

                if (idata == 10) {
                  ln_up1 <- datanow2[i1,j1] - lw_net_temp[ista,1,countdat] 
                  ln_up2 <- datanow2[i2,j1] - lw_net_temp[ista,2,countdat] 
                  ln_up3 <- datanow2[i1,j2] - lw_net_temp[ista,3,countdat] 
                  ln_up4 <- datanow2[i2,j2] - lw_net_temp[ista,4,countdat] 

                  es1 <- ln_up1 / (atemp_temp[ista,1,countdat]**4)
                  es2 <- ln_up2 / (atemp_temp[ista,2,countdat]**4)
                  es3 <- ln_up3 / (atemp_temp[ista,3,countdat]**4)
                  es4 <- ln_up4 / (atemp_temp[ista,4,countdat]**4)

                  ln_up1 <- es1 * (atemp_temp_height_correct[ista,1,countdat]**4)
                  ln_up2 <- es1 * (atemp_temp_height_correct[ista,2,countdat]**4)
                  ln_up3 <- es1 * (atemp_temp_height_correct[ista,3,countdat]**4)
                  ln_up4 <- es1 * (atemp_temp_height_correct[ista,4,countdat]**4)
              
                  datanow[i1,j1] <- datanow2[i1,j1] - ln_up1 
                  datanow[i2,j1] <- datanow2[i2,j1] - ln_up2
                  datanow[i1,j2] <- datanow2[i1,j2] - ln_up3
                  datanow[i2,j2] <- datanow2[i2,j2] - ln_up4
                }                         
 
                ###KEEP THE VALUE FOR RH
                if (idata == 14) {
                  ap_temp[ista,1,countdat] <- datanow[i1,j1]
                  ap_temp[ista,2,countdat] <- datanow[i2,j1]
                  ap_temp[ista,3,countdat] <- datanow[i1,j2]
                  ap_temp[ista,4,countdat] <- datanow[i2,j2]
                 }

                ###RH (relative humidity)
                if (idata == 15) {
                  dpt1 <- datanow2[i1,j1]
                  dpt2 <- datanow2[i2,j1]
                  dpt3 <- datanow2[i1,j2]
                  dpt4 <- datanow2[i2,j2]

                  ap1 <- ap_temp[ista,1,countdat]
                  ap2 <- ap_temp[ista,2,countdat]
                  ap3 <- ap_temp[ista,3,countdat]
                  ap4 <- ap_temp[ista,4,countdat]

                  datanow[i1,j1]<-f(ap1,dpt1)
                  datanow[i2,j1]<-f(ap2,dpt2)
                  datanow[i1,j2]<-f(ap3,dpt3)
                  datanow[i2,j2]<-f(ap4,dpt4)

                }               
              
              datain[ista,((day-1)*24+hour)] <- datanow[i1,j1]*wr*wd+
                                                datanow[i2,j1]*wl*wd+
                                                datanow[i1,j2]*wr*wu+
                                                datanow[i2,j2]*wl*wu
              } #smsk loop       
            }   #ista loop  
            countdat <- countdat + 1         
          }     #hour loop
        }       #day loop
      
        if (counter==1) {
          outdata <- datain #ista*time
        }else{
          outdata <-cbind(outdata,datain) #conbine monthly data to the horizontal direction (vertical:site)
        }
        counter<-counter+1   
      }         #month loop
    }           #year loop

  outdata<-t(outdata) #time * ista
  outdata_temp[,idata,1:sitenum] <-outdata[,1:sitenum]
  }

filename_out<-paste("idata_10.csv", sep="")
write.csv(outdata_temp[,,1], filename_out, row.names=FALSE, col.names=F)


###############################################################################
#OUT DATA
###############################################################################

#CONVERT ERA5 TO SEIB IMPUT
#1:  2m_temperature (K) ->  (Celsius)
###soil temperature will be culculated at each 10cm depth (bottom) in SEIB-DGVM. 
#2: soil_temperature_level_1 (K): 0-7cm -> (Celsius) 
#3: soil_temperature_level_2  (K): 7-21cm -> (Celsius)
#4: soil_temperature_level_3 (K): 21-72cm -> (Celsius)
#5: soil_temperature_level_4 (K): 72-189cm  -> (Celsius)
#6: total_precipitation (m) -> (mm/day)
#7: 10m_u_component_of_wind (m/s) -> (m/s)
#8: 10m_v_component_of_wind (m/s) -> (m/s)
#9: surface_net_thermal_radiation
#10: surface_solar_radiation_downwards
#11: total_sky_direct_solar_radiation_at_surface
#12: surface_solar_radiation_downward_clear_sky
#13: mean_sea_level_pressure
#14: 2m_dewpoint_temperature




###AIR TEMPERATURE#############################################################
  atemp<-outdata_temp[,1,1]

